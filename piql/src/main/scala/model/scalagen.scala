package edu.berkeley.cs.scads.piql.parser

import scala.collection.jcl.Conversions._
import org.apache.log4j.Logger

import org.apache.avro.Schema
import org.apache.avro.Schema.Type


object ScalaGen extends Generator[BoundSpec] {
	val logger = Logger.getLogger("scads.scalagen")
	val autogenWarning = "/* This is an autogenerated scads spec file, do not modify it unless you know what you are doing */"
	val imports = Array("import edu.berkeley.cs.scads.model")

	protected def generate(spec: BoundSpec)(implicit sb: StringBuilder, indnt: Indentation): Unit = {
		/* Headers */
		output("/* This is an autogenerated scads spec file, do not modify it unless you know what you are doing */")
		output("import edu.berkeley.cs.scads.piql.{Entity, EntityPart}")
		output("import edu.berkeley.cs.scads.storage.ScadsCluster")
		output("import org.apache.avro.Schema")
		output("import org.apache.avro.util.Utf8")
		output("import org.apache.avro.specific.SpecificRecordBase")

		spec.entities.values.foreach(generate)
	}

	protected def generate(entity: BoundEntity)(implicit sb: StringBuilder, indnt: Indentation): Unit = {
		outputBraced("class ", entity.name, "(implicit cluster: ScadsCluster) extends Entity(cluster)") {
      output("val namespace = cluster.getNamespace[SpecificRecordBase, SpecificRecordBase](", quote("ent_" + entity.name), ")")
			def outputFields(r: Schema, prefix: String): Unit = {
				r.getFields.foreach(f => f.schema().getType match {
					case Type.STRING => output("var ", prefix + f.name, ":String = \"\"")
					case Type.BOOLEAN =>output("var ", prefix + f.name, ":Boolean = false")
					case Type.INT =>output("var ", prefix + f.name, ":Int = 0")
					case Type.RECORD => outputFields(f.schema, prefix + f.name)
				})
			}
			outputFields(entity.keySchema, "")
			outputFields(entity.valueSchema, "")

			def outputObjects(r: Schema, name: String, prefix: Option[String]) {
				val fields = r.getFields.toList
				fields.filter(_.schema.getType == Type.RECORD).foreach(f => outputObjects(f.schema, f.name, Some(prefix.getOrElse("") + f.name)))

				outputBraced("object ", prefix.getOrElse(name), " extends EntityPart") {
					output("def getSchema(): Schema = Schema.parse(\"\"\"", r.toString, "\"\"\")")

					outputBraced("def get(f: Int): Object =") {
						outputBraced("f match ") {
							fields.zipWithIndex.foreach {
								case (field: Schema.Field, idx: Int) if(field.schema.getType == Type.INT) =>
									output("case ", idx.toString, " => new java.lang.Integer(", prefix.getOrElse(""), field.name, ")")
								case (field: Schema.Field, idx: Int) if(field.schema.getType == Type.BOOLEAN) =>
									output("case ", idx.toString, " => boolean2Boolean(", prefix.getOrElse(""), field.name, ")")
								case (field: Schema.Field, idx: Int) if(field.schema.getType == Type.STRING) =>
									output("case ", idx.toString, " => new Utf8(", prefix.getOrElse(""), field.name, ")")
								case (field: Schema.Field, idx: Int) =>
									output("case ", idx.toString, " => ", prefix.getOrElse(""), field.name)
							}
							output("case _ => throw new org.apache.avro.AvroRuntimeException(\"Bad index\")")
						}
					}

					outputBraced("def put(f: Int, v: Any): Unit =") {
						outputBraced("f match") {
							fields.zipWithIndex.foreach {
								case (field: Schema.Field, idx: Int) if(field.schema.getType == Type.INT) =>
									output("case ", idx.toString, " => ", prefix.getOrElse(""), field.name, " = v.asInstanceOf[java.lang.Integer].intValue")
								case (field: Schema.Field, idx: Int) if(field.schema.getType == Type.BOOLEAN) =>
									output("case ", idx.toString, " => ", prefix.getOrElse(""), field.name, " = v.asInstanceOf[java.lang.Boolean].booleanValue")
								case (field: Schema.Field, idx: Int) if(field.schema.getType == Type.STRING) =>
									output("case ", idx.toString, " => ", prefix.getOrElse(""), field.name, " = v.toString")
								case (field: Schema.Field, idx: Int) =>
							}
							output("case _ => throw new org.apache.avro.AvroRuntimeException(\"Bad index\")")
						}
					}
				}
			}

			outputObjects(entity.keySchema, "key", None)
			outputObjects(entity.valueSchema, "value", None)
		}
	}

	private def quote(string: String) = "\"" + string + "\""
}
