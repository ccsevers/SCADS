package edu.berkeley.cs.scads.model.parser

object ScalaGen extends Generator[BoundSpec] {
	val autogenWarning = "/* This is an autogenerated scads spec file, do not modify it unless you know what you are doing */"
	val imports = Array("import edu.berkeley.cs.scads.model")

	protected def generate(spec: BoundSpec)(implicit sb: StringBuilder, indnt: Indentation): Unit = {
		/* Headers */
		output("/* This is an autogenerated scads spec file, do not modify it unless you know what you are doing */")
		output("import edu.berkeley.cs.scads.model._")

		/* Entities */
		spec.entities.foreach((e) => {
			output("class ", e._1, "(implicit env: Environment) extends Entity()(env) {")
			indent {
				/* Setup namespace and versioning system */
				output("val namespace = \"", Namespaces.entity(e._1), "\"")
				output("val version = new IntegerVersion()")

				/* Attribute holding objects */
				e._2.attributes.foreach((a) => {
					output("object ", a._1, " extends ", fieldType(a._2))
				})

				/* Attribute name to object map */
				output("val attributes = Map(")
				indent {
					val attrMap = e._2.attributes.keys.map((a) =>
						"(\"" + a + "\" -> " + a  +")").mkString("", ",\n", "")
					output(attrMap)

				}
				output(")")

				/* Index placeholder */
				output("val indexes = Array[Index]()")

				/* Primary Key */
				output("val primaryKey = ")
				indent {
					if(e._2.keys.size > 2)
						output("new CompositeKey(" + e._2.keys.mkString("", ",", ""), ")")
					else
						output(e._2.keys(0))
				}

				/* Ouput any queries for this entity */
				e._2.queries.foreach((q) => generateQuery(q._1, q._2))
			}
			output("}")

		})
		/* Output object for Orphan Queries */
		output("object Queries {")
		indent {
			spec.orphanQueries.foreach((q) => generateQuery(q._1, q._2))
		}
		output("}")
	}

	protected def generateQuery(name: String, query: BoundQuery)(implicit sb: StringBuilder, indnt: Indentation) {
		val args = query.parameters.map((p) => {p.name + ": " + toScalaType(p.pType)}).mkString("", ",", "")

		output("def ", name, "(", args, ")(implicit env: Environment) = {")
		indent {
			generatePlan(query.plan)
		}
		output("}")
	}


	protected def generatePlan(plan: Plan)(implicit sb: StringBuilder, indnt: Indentation) {
		/* TODO: Just output null if we don't have a plan */
		if(plan == null){
			output("null")
			return
		}

		plan match {
			case PrimaryKeyGet(entityType, values) => {
				output("new Materialize[", entityType, "](")
				indent {
					output("new SingleGet(\"", Namespaces.entity(entityType), "\",", generateFixedValue(values(0)), ", new IntegerVersion) with ReadOneGetter")
				}
				output(").exec")
			}
		}
	}

	protected def generateFixedValue(value: FixedValue): String = {
		value match {
			case Parameter(name, _) => "(new StringField)(name)"
			case _ => throw new UnimplementedException
		}
	}

	protected def toScalaType(aType: AttributeType): String = {
		 aType match {
				case BooleanType => "Boolean"
				case StringType => "String"
				case IntegerType => "Int"
			}
	}

	private def fieldType(aType: AttributeType): String = {
		aType match {
			case BooleanType => "BooleanField"
			case StringType => "StringField"
			case IntegerType => "IntegerField"
		}
	}
}
